# Generated by Django 4.2.4 on 2024-02-27 13:44

import ckeditor.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import users.manager
import users.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('project', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('language', models.CharField(choices=[('en', 'English'), ('pt-br', 'Portuguese (Brazil)')], default='pt-br', max_length=10)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('username', models.CharField(blank=True, default='Dynamic insert', max_length=25, null=True)),
                ('type', models.CharField(choices=[('COMPANY', 'Company'), ('COORDINATOR', 'Coordinator'), ('PARTICIPANT', 'Participant'), ('STAFF', 'Staff')], default='PARTICIPANT', max_length=50, verbose_name='Type')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('password', models.CharField(max_length=255)),
                ('i_agree', models.BooleanField(default=False, validators=[users.models.User.validate_agree])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', users.manager.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('code', models.CharField(max_length=25)),
            ],
            options={
                'verbose_name': 'Country',
                'verbose_name_plural': 'Countries',
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Coordinator',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('picture', models.ImageField(upload_to='coordinator', verbose_name='photo')),
                ('picture_description', models.CharField(max_length=255, verbose_name='Picture description')),
                ('phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Phone number')),
                ('social_name', models.CharField(blank=True, max_length=125, null=True, verbose_name='Social Name')),
                ('gender_identity', models.CharField(blank=True, choices=[(None, "-- I don't want to inform --"), ('Cis man', 'Cis man'), ('Cis woman', 'Cis woman'), ('Non-binary', 'Non-binary'), ('Queer', 'Queer'), ('Trans man', 'Trans man'), ('Trans woman', 'Trans woman')], max_length=80, null=True, verbose_name='Gender identity')),
                ('other_gender', models.CharField(blank=True, max_length=125, null=True, verbose_name='Other gender')),
                ('sexual_orientation', models.CharField(blank=True, choices=[(None, "-- I don't want to inform --"), ('Assexual', 'Assexual'), ('Bissexual', 'Bissexual'), ('Gay', 'Gay'), ('Heterosexual/straight', 'Heterosexual/straight'), ('Lesbian', 'Lesbian'), ('Pansexual', 'Pansexual')], max_length=50, null=True, verbose_name='Sexual orientation')),
                ('other_orientation', models.CharField(blank=True, max_length=80, null=True, verbose_name='Other orientation')),
                ('desability', models.CharField(blank=True, choices=[(None, "-- I don't want to inform --"), ('I identify myself as a person with visual disability', 'I identify myself as a person with visual disability'), ('I identify myself as a person with low vision', 'I identify myself as a person with low vision'), ('I identify myself as blind', 'I identify myself as blind'), ('I identify myself as a person with hearing disability', 'I identify myself as a person with hearing disability'), ('I identify myself as deaf', 'I identify myself as deaf'), ('I identify myself as a person with intelectual disability', 'I identify myself as a person with intelectual disability'), ('I identify myself as a person with mental disability', 'I identify myself as a person with mental disability'), ('I identify myself as a person with physical disability', 'I identify myself as a person with physical disability'), ('I identify myself as a person with no disability', 'I identify myself as a person with no disability')], max_length=100, null=True, verbose_name='Desability')),
                ('other_desability', models.CharField(blank=True, max_length=145, null=True, verbose_name='Other desability')),
                ('title_pronoun', models.CharField(blank=True, max_length=45, null=True, verbose_name='Title and Pronoun')),
            ],
            options={
                'verbose_name': 'Coordinator',
                'verbose_name_plural': 'Coordinators',
            },
            bases=('users.user',),
            managers=[
                ('objects', users.manager.CoordinatorManager()),
            ],
        ),
        migrations.CreateModel(
            name='Manager',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('profile_manager', models.CharField(default='', max_length=255, verbose_name='Manager Name')),
                ('social_name', models.CharField(blank=True, max_length=125, null=True, verbose_name='Social Name')),
                ('title_pronoun', models.CharField(blank=True, max_length=45, null=True, verbose_name='Title and Pronoun')),
                ('is_resp', models.BooleanField(default=False, validators=[users.models.User.validate_agree], verbose_name='I am responsible for the information contained in this profile')),
                ('cnpj', models.CharField(max_length=45, verbose_name='CNPJ')),
                ('address', models.CharField(blank=True, max_length=255, null=True, verbose_name='Address')),
                ('phone_manager', models.CharField(default='', max_length=20, verbose_name='Phone')),
                ('email_manager', models.EmailField(default='', max_length=255, verbose_name='Email')),
                ('picture', models.ImageField(upload_to='company', verbose_name='Company Logo')),
                ('banner', models.ImageField(upload_to='company', verbose_name='Company Banner')),
                ('picture_description', models.CharField(max_length=255, verbose_name='Logo description')),
                ('banner_description', models.CharField(max_length=255, verbose_name='Banner description')),
                ('phone', models.CharField(max_length=20, verbose_name='Company phone number')),
                ('company_description', ckeditor.fields.RichTextField(verbose_name='Company description')),
            ],
            options={
                'verbose_name': 'Company',
                'verbose_name_plural': 'Companies',
            },
            bases=('users.user',),
            managers=[
                ('objects', users.manager.CompanyManager()),
            ],
        ),
        migrations.CreateModel(
            name='Participant',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('picture', models.ImageField(blank=True, null=True, upload_to='participant')),
                ('picture_description', models.CharField(blank=True, max_length=255, null=True)),
                ('social_name', models.CharField(blank=True, max_length=125, null=True)),
                ('title_pronoun', models.CharField(blank=True, max_length=45, null=True)),
                ('gender_identity', models.CharField(blank=True, choices=[(None, "-- I don't want to inform --"), ('Cis man', 'Cis man'), ('Cis woman', 'Cis woman'), ('Non-binary', 'Non-binary'), ('Queer', 'Queer'), ('Trans man', 'Trans man'), ('Trans woman', 'Trans woman')], max_length=80, null=True)),
                ('other_gender', models.CharField(blank=True, max_length=125, null=True)),
                ('sexual_orientation', models.CharField(blank=True, choices=[(None, "-- I don't want to inform --"), ('Assexual', 'Assexual'), ('Bissexual', 'Bissexual'), ('Gay', 'Gay'), ('Heterosexual/straight', 'Heterosexual/straight'), ('Lesbian', 'Lesbian'), ('Pansexual', 'Pansexual')], max_length=50, null=True)),
                ('other_orientation', models.CharField(blank=True, max_length=80, null=True)),
                ('desability', models.CharField(blank=True, choices=[(None, "-- I don't want to inform --"), ('I identify myself as a person with visual disability', 'I identify myself as a person with visual disability'), ('I identify myself as a person with low vision', 'I identify myself as a person with low vision'), ('I identify myself as blind', 'I identify myself as blind'), ('I identify myself as a person with hearing disability', 'I identify myself as a person with hearing disability'), ('I identify myself as deaf', 'I identify myself as deaf'), ('I identify myself as a person with intelectual disability', 'I identify myself as a person with intelectual disability'), ('I identify myself as a person with mental disability', 'I identify myself as a person with mental disability'), ('I identify myself as a person with physical disability', 'I identify myself as a person with physical disability'), ('I identify myself as a person with no disability', 'I identify myself as a person with no disability')], max_length=100, null=True)),
                ('other_desability', models.CharField(blank=True, max_length=145, null=True)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('pj', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_project', to='project.project')),
            ],
            options={
                'verbose_name': 'Participant',
                'verbose_name_plural': 'Participants',
            },
            bases=('users.user',),
            managers=[
                ('objects', users.manager.ParticipantManager()),
            ],
        ),
    ]
